# ------------------------------------------------------------
# 파일명: main.py
# 위치: api/main.py
# 이 파일은 FastAPI로 만든 웹 서비스를 실행하기 위한 기본 앱 파일이다.
# - 지금까지 만든 기능들(task, done 등)을 이곳에 모아서 하나의 웹 앱으로 완성한다.
# - FastAPI의 app 객체가 실제 웹 서버 역할을 하게 된다.
# ------------------------------------------------------------

# * FastAPI 앱을 만들기 위한 도구를 불러온다
from fastapi import FastAPI

# * 우리가 만든 기능 파일들을 불러온다
# - task.py → 할 일 목록 보기, 추가, 수정, 삭제 기능
# - done.py → 완료 상태 표시, 완료 상태 해제 기능
# - 파일 위치: api/routers 폴더 안에 있음
from api.routers import task, done

# * 참고 설명:
# - 기능별로 파일을 나누면 코드를 보기 쉽고 관리도 쉬워진다.
# - 각각의 파일에는 router라는 이름으로 기능들이 모여 있다.
# - 여기 main.py에서는 그 router들을 앱(app)에 연결해줘야 실제로 작동한다.

# * FastAPI 앱 객체를 생성한다
# - 이 객체가 웹 서버의 본체가 된다.
app = FastAPI()

# ------------------------------------------------------------
# [1] task 기능을 앱에 연결한다
# - /tasks 경로로 시작하는 API 기능들을 등록함
# - 예: /tasks → 할 일 목록 조회
#       /tasks → 할 일 추가 (POST)
#       /tasks/3 → 특정 할 일 수정 또는 삭제
# ------------------------------------------------------------
app.include_router(task.router)

# ------------------------------------------------------------
# [2] done 기능을 앱에 연결한다
# - /tasks/{번호}/done 경로로 시작하는 API 기능들을 등록함
# - 예: /tasks/3/done → 3번 할 일을 완료 처리하거나 해제
# ------------------------------------------------------------
app.include_router(done.router)

# ------------------------------------------------------------
# 추가 설명:
# - include_router()는 말 그대로 기능(router)을 앱(app)에 "포함시킨다"는 뜻이다.
# - 우리가 만든 기능을 각각의 파일에 나눠서 만들고,
#   이 main.py에서 전부 연결해줘야 FastAPI 서버가 완성된다.
# - 연결하지 않으면 기능이 있어도 작동하지 않는다.
# ------------------------------------------------------------
